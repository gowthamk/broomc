class LinkedListNode<'a extends Object>  extends Object  {
    'a val;
    LinkedListNode<'a>  prev;
    LinkedListNode<'a>  next;
    LinkedListNode('a val) {
        this.val = val;
        this.prev = Null;
        this.next = Null;
    }
}
class LinkedList<'a extends Object>  extends Object  {
    LinkedListNode<'a>  head;
    int count;
    LinkedList('a v) {
        this.head = new LinkedListNode<'a>(v);
        this.count=1;
    }
    void add('a v) {
        let LinkedListNode<'a> n = new LinkedListNode<'a>(v);
        n.next = this.head;
        this.head.prev = n;
        this.head = n;
        this.count=this.count+1;
    }
    'a head() {
        return this.head.val;
    }

    LinkedList<'a>   reverse(void u) {
        let LinkedList<'a> xs = new LinkedList<'a>  (this.head.val);
        let LinkedListNode<'a> cur = this.head.next;
        while(!(cur== Null)) {
            xs.add(cur.val);
            cur = cur.next;
        }
        return xs;
    }
}
/*
 * Generated by broomc:
Post Region Type Inference:
class LinkedListNode<R3,R2|(R2≥R3)><'a extends Object<R2>> extends Object<R3> {
  'a val;
  LinkedListNode<R3,R2><'a> prev;
  LinkedListNode<R3,R2><'a> next;
  LinkedListNode ('a val) {
  
    this.val = val;
    this.prev = Null;
    this.next = Null;
  }
}
class LinkedList<R5,R4|(R4≥R5)><'a extends Object<R4>> extends Object<R5> {
  LinkedListNode<R5,R4><'a> head;
  int count;
  LinkedList ('a v) {
  
    this.head = new LinkedListNode<R5,R4><'a>(v);
    this.count = 1;
  }
  void <R5|(R4≥R5)>add('a v) {
  
    LinkedListNode<R5,R4><'a> n = new LinkedListNode<R5,R4><'a>(v);
    n.next = this.head;
    this.head.prev = n;
    this.head = n;
    this.count = this.count + 1;
  }
  'a <R15|(R4≥R5)>head() {
  
    this.head.val
  }
  LinkedList<R17,R4><'a> <R17,R4|(R4≥R5 ∧ R4≥R17)>reverse(void u) {
  
    LinkedList<R17,R4><'a> xs = new LinkedList<R17,R4><'a>(this.head.val);
    LinkedListNode<R5,R4><'a> cur = this.head.next;
    while (!cur == Null) {
    
      xs.add<R17>(cur.val)
      cur = cur.next;}
    xs
  }
}
*/
